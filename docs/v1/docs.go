// Package v1 Code generated by swaggo/swag. DO NOT EDIT
package v1

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Zeus WPI",
            "url": "https://zeus.gent/contact",
            "email": "bestuur@zeus.ugent.be"
        },
        "license": {
            "name": "GNU General Public License v3.0",
            "url": "https://github.com/ZeusWPI/events/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/event": {
            "get": {
                "description": "Get all planned events for the current academic year.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Get this years events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.event"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/event/next": {
            "get": {
                "description": "Get the next event.\nReturns a 404 if there's no next event planned.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Get next event",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.event"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/event/poster/{id}": {
            "get": {
                "description": "Get the poster for an event.\nBy default it will return the converted webp version for the poster\nIf the original png is desired you can use the query paramter 'original'\nReturns 400 if the event isn't found and 404 if the event doesn't have the requested poster type",
                "produces": [
                    "image/webp png"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Get event poster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "event id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "set to true for the original png version",
                        "name": "original",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "set to true for the scc version",
                        "name": "scc",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/image": {
            "put": {
                "description": "Store the image and get the id back",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Store an image",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/image/{id}": {
            "get": {
                "description": "Get an image given an id",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Get an image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "image id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "v1.event": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Can be empty",
                    "type": "string"
                },
                "end_time": {
                    "description": "Might not be present if not applicable",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "description": "Can be empty",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "url": {
                    "description": "URL to the website page",
                    "type": "string"
                },
                "year_end": {
                    "type": "integer"
                },
                "year_start": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Events API V1",
	Description:      "Events API V1 Specifications",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

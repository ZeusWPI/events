// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TaskResult string

const (
	TaskResultSuccess  TaskResult = "success"
	TaskResultFailed   TaskResult = "failed"
	TaskResultResolved TaskResult = "resolved"
)

func (e *TaskResult) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskResult(s)
	case string:
		*e = TaskResult(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskResult: %T", src)
	}
	return nil
}

type NullTaskResult struct {
	TaskResult TaskResult
	Valid      bool // Valid is true if TaskResult is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskResult) Scan(value interface{}) error {
	if value == nil {
		ns.TaskResult, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskResult.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskResult) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskResult), nil
}

type Announcement struct {
	ID       int32
	Content  string
	SendTime pgtype.Timestamptz
	Send     bool
	Error    pgtype.Text
	YearID   int32
	AuthorID int32
}

type AnnouncementEvent struct {
	ID             int32
	EventID        int32
	AnnouncementID int32
}

type Board struct {
	ID          int32
	MemberID    int32
	YearID      int32
	Role        string
	IsOrganizer bool
}

type Check struct {
	ID          int32
	EventID     int32
	Description string
	Done        bool
}

type Dsa struct {
	ID      int32
	EventID int32
	DsaID   pgtype.Int4
	Deleted bool
}

type Event struct {
	ID          int32
	FileName    string
	Name        string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
	Location    pgtype.Text
	YearID      int32
}

type Mail struct {
	ID       int32
	Content  string
	SendTime pgtype.Timestamptz
	Send     bool
	Error    pgtype.Text
	Title    string
	YearID   int32
	AuthorID int32
}

type MailEvent struct {
	ID      int32
	MailID  int32
	EventID int32
}

type Member struct {
	ID       int32
	Name     string
	Username pgtype.Text
	ZauthID  pgtype.Int4
}

type Organizer struct {
	ID      int32
	EventID int32
	BoardID int32
}

type Poster struct {
	ID      int32
	EventID int32
	FileID  string
	Scc     bool
	WebpID  string
}

type Task struct {
	ID        int32
	Name      string
	RunAt     pgtype.Timestamptz
	Error     pgtype.Text
	Recurring bool
	Duration  pgtype.Interval
	Result    TaskResult
}

type Year struct {
	ID        int32
	YearStart int32
	YearEnd   int32
}

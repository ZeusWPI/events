// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CheckStatus string

const (
	CheckStatusDone     CheckStatus = "done"
	CheckStatusDoneLate CheckStatus = "done_late"
	CheckStatusTodo     CheckStatus = "todo"
	CheckStatusTodoLate CheckStatus = "todo_late"
	CheckStatusWarning  CheckStatus = "warning"
)

func (e *CheckStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CheckStatus(s)
	case string:
		*e = CheckStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CheckStatus: %T", src)
	}
	return nil
}

type NullCheckStatus struct {
	CheckStatus CheckStatus
	Valid       bool // Valid is true if CheckStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCheckStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CheckStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CheckStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCheckStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CheckStatus), nil
}

type CheckType string

const (
	CheckTypeManual    CheckType = "manual"
	CheckTypeAutomatic CheckType = "automatic"
)

func (e *CheckType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CheckType(s)
	case string:
		*e = CheckType(s)
	default:
		return fmt.Errorf("unsupported scan type for CheckType: %T", src)
	}
	return nil
}

type NullCheckType struct {
	CheckType CheckType
	Valid     bool // Valid is true if CheckType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCheckType) Scan(value interface{}) error {
	if value == nil {
		ns.CheckType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CheckType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCheckType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CheckType), nil
}

type TaskResult string

const (
	TaskResultSuccess  TaskResult = "success"
	TaskResultFailed   TaskResult = "failed"
	TaskResultResolved TaskResult = "resolved"
)

func (e *TaskResult) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskResult(s)
	case string:
		*e = TaskResult(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskResult: %T", src)
	}
	return nil
}

type NullTaskResult struct {
	TaskResult TaskResult
	Valid      bool // Valid is true if TaskResult is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskResult) Scan(value interface{}) error {
	if value == nil {
		ns.TaskResult, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskResult.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskResult) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskResult), nil
}

type TaskType string

const (
	TaskTypeRecurring TaskType = "recurring"
	TaskTypeOnce      TaskType = "once"
)

func (e *TaskType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskType(s)
	case string:
		*e = TaskType(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskType: %T", src)
	}
	return nil
}

type NullTaskType struct {
	TaskType TaskType
	Valid    bool // Valid is true if TaskType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskType) Scan(value interface{}) error {
	if value == nil {
		ns.TaskType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskType), nil
}

type Announcement struct {
	ID       int32
	Content  string
	SendTime pgtype.Timestamptz
	Send     bool
	Error    pgtype.Text
	YearID   int32
	AuthorID int32
}

type AnnouncementEvent struct {
	ID             int32
	EventID        int32
	AnnouncementID int32
}

type Board struct {
	ID          int32
	MemberID    int32
	YearID      int32
	Role        string
	IsOrganizer bool
}

type Check struct {
	Uid         string
	Description string
	Deadline    pgtype.Int8
	Active      bool
	Type        CheckType
	CreatorID   pgtype.Int4
}

type CheckEvent struct {
	ID        int32
	CheckUid  string
	EventID   int32
	Status    CheckStatus
	Message   pgtype.Text
	UpdatedAt pgtype.Timestamptz
}

type Dsa struct {
	ID      int32
	EventID int32
	DsaID   pgtype.Int4
	Deleted bool
}

type Event struct {
	ID          int32
	FileName    string
	Name        string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
	Location    pgtype.Text
	YearID      int32
	Deleted     bool
}

type Image struct {
	ID     int32
	Name   string
	FileID string
}

type Mail struct {
	ID       int32
	Content  string
	SendTime pgtype.Timestamptz
	Send     bool
	Error    pgtype.Text
	Title    string
	YearID   int32
	AuthorID int32
}

type MailEvent struct {
	ID      int32
	MailID  int32
	EventID int32
}

type Member struct {
	ID       int32
	Name     string
	Username pgtype.Text
	ZauthID  pgtype.Int4
}

type Organizer struct {
	ID      int32
	EventID int32
	BoardID int32
}

type Poster struct {
	ID      int32
	EventID int32
	FileID  string
	Scc     bool
	WebpID  string
}

type Task struct {
	Uid    string
	Name   string
	Active bool
	Type   TaskType
}

type TaskRun struct {
	ID       int32
	TaskUid  string
	RunAt    pgtype.Timestamptz
	Result   TaskResult
	Error    pgtype.Text
	Duration int64
}

type Year struct {
	ID        int32
	YearStart int32
	YearEnd   int32
}

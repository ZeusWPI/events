// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: announcement.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const announcementCreate = `-- name: AnnouncementCreate :one
INSERT INTO announcement (content, time, target, event, member)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type AnnouncementCreateParams struct {
	Content string
	Time    pgtype.Timestamptz
	Target  pgtype.Text
	Event   int32
	Member  pgtype.Int4
}

func (q *Queries) AnnouncementCreate(ctx context.Context, arg AnnouncementCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, announcementCreate,
		arg.Content,
		arg.Time,
		arg.Target,
		arg.Event,
		arg.Member,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const announcementDelete = `-- name: AnnouncementDelete :exec
DELETE FROM announcement
WHERE id = $1
`

func (q *Queries) AnnouncementDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, announcementDelete, id)
	return err
}

const announcementGetAll = `-- name: AnnouncementGetAll :many
SELECT announcement.id, content, time, target, sent, created_at, updated_at, event, member, member.id, name, username, zauth_id FROM announcement
INNER JOIN member ON announcement.member = member.id
`

type AnnouncementGetAllRow struct {
	ID        int32
	Content   string
	Time      pgtype.Timestamptz
	Target    pgtype.Text
	Sent      bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Event     int32
	Member    pgtype.Int4
	ID_2      int32
	Name      string
	Username  pgtype.Text
	ZauthID   pgtype.Int4
}

func (q *Queries) AnnouncementGetAll(ctx context.Context) ([]AnnouncementGetAllRow, error) {
	rows, err := q.db.Query(ctx, announcementGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnnouncementGetAllRow
	for rows.Next() {
		var i AnnouncementGetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Time,
			&i.Target,
			&i.Sent,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Event,
			&i.Member,
			&i.ID_2,
			&i.Name,
			&i.Username,
			&i.ZauthID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const announcementGetByEvent = `-- name: AnnouncementGetByEvent :many
SELECT announcement.id, content, time, target, sent, created_at, updated_at, event, member, member.id, name, username, zauth_id FROM announcement
INNER JOIN member ON announcement.member = member.id
WHERE event = $1
`

type AnnouncementGetByEventRow struct {
	ID        int32
	Content   string
	Time      pgtype.Timestamptz
	Target    pgtype.Text
	Sent      bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Event     int32
	Member    pgtype.Int4
	ID_2      int32
	Name      string
	Username  pgtype.Text
	ZauthID   pgtype.Int4
}

func (q *Queries) AnnouncementGetByEvent(ctx context.Context, event int32) ([]AnnouncementGetByEventRow, error) {
	rows, err := q.db.Query(ctx, announcementGetByEvent, event)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnnouncementGetByEventRow
	for rows.Next() {
		var i AnnouncementGetByEventRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Time,
			&i.Target,
			&i.Sent,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Event,
			&i.Member,
			&i.ID_2,
			&i.Name,
			&i.Username,
			&i.ZauthID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const announcementUpdate = `-- name: AnnouncementUpdate :exec
UPDATE announcement
SET content = $1, time = $2, target = $3, sent = $4, event = $5, member = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $7
`

type AnnouncementUpdateParams struct {
	Content string
	Time    pgtype.Timestamptz
	Target  pgtype.Text
	Sent    bool
	Event   int32
	Member  pgtype.Int4
	ID      int32
}

func (q *Queries) AnnouncementUpdate(ctx context.Context, arg AnnouncementUpdateParams) error {
	_, err := q.db.Exec(ctx, announcementUpdate,
		arg.Content,
		arg.Time,
		arg.Target,
		arg.Sent,
		arg.Event,
		arg.Member,
		arg.ID,
	)
	return err
}

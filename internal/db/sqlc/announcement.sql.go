// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: announcement.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const announcementCreate = `-- name: AnnouncementCreate :one
INSERT INTO announcement (year_id, author_id, content, send_time, send, error)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type AnnouncementCreateParams struct {
	YearID   int32
	AuthorID int32
	Content  string
	SendTime pgtype.Timestamptz
	Send     bool
	Error    pgtype.Text
}

func (q *Queries) AnnouncementCreate(ctx context.Context, arg AnnouncementCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, announcementCreate,
		arg.YearID,
		arg.AuthorID,
		arg.Content,
		arg.SendTime,
		arg.Send,
		arg.Error,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const announcementDelete = `-- name: AnnouncementDelete :exec
DELETE FROM announcement
WHERE id = $1
AND NOT send AND error IS NULL
`

func (q *Queries) AnnouncementDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, announcementDelete, id)
	return err
}

const announcementGetAll = `-- name: AnnouncementGetAll :many
SELECT a.id, content, send_time, send, error, year_id, author_id, a_e.id, event_id, announcement_id
FROM announcement a
LEFT JOIN announcement_event a_e ON a_e.announcement_id = a.id
`

type AnnouncementGetAllRow struct {
	ID             int32
	Content        string
	SendTime       pgtype.Timestamptz
	Send           bool
	Error          pgtype.Text
	YearID         int32
	AuthorID       int32
	ID_2           pgtype.Int4
	EventID        pgtype.Int4
	AnnouncementID pgtype.Int4
}

func (q *Queries) AnnouncementGetAll(ctx context.Context) ([]AnnouncementGetAllRow, error) {
	rows, err := q.db.Query(ctx, announcementGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnnouncementGetAllRow
	for rows.Next() {
		var i AnnouncementGetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SendTime,
			&i.Send,
			&i.Error,
			&i.YearID,
			&i.AuthorID,
			&i.ID_2,
			&i.EventID,
			&i.AnnouncementID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const announcementGetByEvents = `-- name: AnnouncementGetByEvents :many
SELECT a.id, content, send_time, send, error, year_id, author_id, a_e.id, event_id, announcement_id 
FROM announcement a
LEFT JOIN announcement_event a_e ON a_e.announcement_id = a.id
WHERE a_e.event_id = ANY($1::int[])
ORDER BY send_time
`

type AnnouncementGetByEventsRow struct {
	ID             int32
	Content        string
	SendTime       pgtype.Timestamptz
	Send           bool
	Error          pgtype.Text
	YearID         int32
	AuthorID       int32
	ID_2           pgtype.Int4
	EventID        pgtype.Int4
	AnnouncementID pgtype.Int4
}

func (q *Queries) AnnouncementGetByEvents(ctx context.Context, dollar_1 []int32) ([]AnnouncementGetByEventsRow, error) {
	rows, err := q.db.Query(ctx, announcementGetByEvents, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnnouncementGetByEventsRow
	for rows.Next() {
		var i AnnouncementGetByEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SendTime,
			&i.Send,
			&i.Error,
			&i.YearID,
			&i.AuthorID,
			&i.ID_2,
			&i.EventID,
			&i.AnnouncementID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const announcementGetByID = `-- name: AnnouncementGetByID :many
SELECT a.id, content, send_time, send, error, year_id, author_id, a_e.id, event_id, announcement_id
FROM announcement a
LEFT JOIN announcement_event a_e ON a_e.announcement_id = a.id
WHERE a.id = $1
`

type AnnouncementGetByIDRow struct {
	ID             int32
	Content        string
	SendTime       pgtype.Timestamptz
	Send           bool
	Error          pgtype.Text
	YearID         int32
	AuthorID       int32
	ID_2           pgtype.Int4
	EventID        pgtype.Int4
	AnnouncementID pgtype.Int4
}

func (q *Queries) AnnouncementGetByID(ctx context.Context, id int32) ([]AnnouncementGetByIDRow, error) {
	rows, err := q.db.Query(ctx, announcementGetByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnnouncementGetByIDRow
	for rows.Next() {
		var i AnnouncementGetByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SendTime,
			&i.Send,
			&i.Error,
			&i.YearID,
			&i.AuthorID,
			&i.ID_2,
			&i.EventID,
			&i.AnnouncementID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const announcementGetUnsend = `-- name: AnnouncementGetUnsend :many
SELECT a.id, content, send_time, send, error, year_id, author_id, a_e.id, event_id, announcement_id
FROM announcement a
LEFT JOIN announcement_event a_e ON a_e.announcement_id = a.id
WHERE NOT send AND error IS NULL
`

type AnnouncementGetUnsendRow struct {
	ID             int32
	Content        string
	SendTime       pgtype.Timestamptz
	Send           bool
	Error          pgtype.Text
	YearID         int32
	AuthorID       int32
	ID_2           pgtype.Int4
	EventID        pgtype.Int4
	AnnouncementID pgtype.Int4
}

func (q *Queries) AnnouncementGetUnsend(ctx context.Context) ([]AnnouncementGetUnsendRow, error) {
	rows, err := q.db.Query(ctx, announcementGetUnsend)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnnouncementGetUnsendRow
	for rows.Next() {
		var i AnnouncementGetUnsendRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SendTime,
			&i.Send,
			&i.Error,
			&i.YearID,
			&i.AuthorID,
			&i.ID_2,
			&i.EventID,
			&i.AnnouncementID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const announcementSend = `-- name: AnnouncementSend :exec
UPDATE announcement
SET send = true
WHERE id = $1
`

func (q *Queries) AnnouncementSend(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, announcementSend, id)
	return err
}

const announcementUpdate = `-- name: AnnouncementUpdate :exec
UPDATE announcement
SET content = $1, send_time = $2, error = $3
WHERE id = $4 AND NOT send
`

type AnnouncementUpdateParams struct {
	Content  string
	SendTime pgtype.Timestamptz
	Error    pgtype.Text
	ID       int32
}

func (q *Queries) AnnouncementUpdate(ctx context.Context, arg AnnouncementUpdateParams) error {
	_, err := q.db.Exec(ctx, announcementUpdate,
		arg.Content,
		arg.SendTime,
		arg.Error,
		arg.ID,
	)
	return err
}

const announcmentGetByYear = `-- name: AnnouncmentGetByYear :many
SELECT a.id, content, send_time, send, error, year_id, author_id, a_e.id, event_id, announcement_id
FROM announcement a
LEFT JOIN announcement_event a_e ON a_e.announcement_id = a.id
WHERE a.year_id = $1
ORDER BY a.send_time
`

type AnnouncmentGetByYearRow struct {
	ID             int32
	Content        string
	SendTime       pgtype.Timestamptz
	Send           bool
	Error          pgtype.Text
	YearID         int32
	AuthorID       int32
	ID_2           pgtype.Int4
	EventID        pgtype.Int4
	AnnouncementID pgtype.Int4
}

func (q *Queries) AnnouncmentGetByYear(ctx context.Context, yearID int32) ([]AnnouncmentGetByYearRow, error) {
	rows, err := q.db.Query(ctx, announcmentGetByYear, yearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnnouncmentGetByYearRow
	for rows.Next() {
		var i AnnouncmentGetByYearRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SendTime,
			&i.Send,
			&i.Error,
			&i.YearID,
			&i.AuthorID,
			&i.ID_2,
			&i.EventID,
			&i.AnnouncementID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

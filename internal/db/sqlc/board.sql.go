// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: board.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const boardCreate = `-- name: BoardCreate :one
INSERT INTO board (role, member_id, year_id)
VALUES ($1, $2, $3)
RETURNING id
`

type BoardCreateParams struct {
	Role     string
	MemberID int32
	YearID   int32
}

func (q *Queries) BoardCreate(ctx context.Context, arg BoardCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, boardCreate, arg.Role, arg.MemberID, arg.YearID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const boardDelete = `-- name: BoardDelete :exec
DELETE FROM board
WHERE id = $1
`

func (q *Queries) BoardDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, boardDelete, id)
	return err
}

const boardGetAllPopulated = `-- name: BoardGetAllPopulated :many
SELECT b.id, member_id, year_id, role, m.id, name, username, zauth_id, y.id, year_start, year_end 
FROM board b
INNER JOIN member m ON b.member_id = m.id 
INNER JOIN year y ON b.year_id = y.id
`

type BoardGetAllPopulatedRow struct {
	ID        int32
	MemberID  int32
	YearID    int32
	Role      string
	ID_2      int32
	Name      string
	Username  pgtype.Text
	ZauthID   pgtype.Int4
	ID_3      int32
	YearStart int32
	YearEnd   int32
}

func (q *Queries) BoardGetAllPopulated(ctx context.Context) ([]BoardGetAllPopulatedRow, error) {
	rows, err := q.db.Query(ctx, boardGetAllPopulated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BoardGetAllPopulatedRow
	for rows.Next() {
		var i BoardGetAllPopulatedRow
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.YearID,
			&i.Role,
			&i.ID_2,
			&i.Name,
			&i.Username,
			&i.ZauthID,
			&i.ID_3,
			&i.YearStart,
			&i.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const boardGetByIds = `-- name: BoardGetByIds :many
SELECT id, member_id, year_id, role 
FROM board
WHERE id = ANY($1::int[])
`

func (q *Queries) BoardGetByIds(ctx context.Context, dollar_1 []int32) ([]Board, error) {
	rows, err := q.db.Query(ctx, boardGetByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.YearID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const boardGetByMemberID = `-- name: BoardGetByMemberID :many
SELECT id, member_id, year_id, role 
FROM board
WHERE member_id = $1
`

func (q *Queries) BoardGetByMemberID(ctx context.Context, memberID int32) ([]Board, error) {
	rows, err := q.db.Query(ctx, boardGetByMemberID, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.YearID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const boardGetByMemberYear = `-- name: BoardGetByMemberYear :one
SELECT b.id, member_id, year_id, role, m.id, name, username, zauth_id, y.id, year_start, year_end 
FROM board b 
INNER JOIN member m ON b.member_id = m.id 
INNER JOIN year y ON b.year_id = y.id
WHERE m.id = $1 AND y.id = $2
`

type BoardGetByMemberYearParams struct {
	ID   int32
	ID_2 int32
}

type BoardGetByMemberYearRow struct {
	ID        int32
	MemberID  int32
	YearID    int32
	Role      string
	ID_2      int32
	Name      string
	Username  pgtype.Text
	ZauthID   pgtype.Int4
	ID_3      int32
	YearStart int32
	YearEnd   int32
}

func (q *Queries) BoardGetByMemberYear(ctx context.Context, arg BoardGetByMemberYearParams) (BoardGetByMemberYearRow, error) {
	row := q.db.QueryRow(ctx, boardGetByMemberYear, arg.ID, arg.ID_2)
	var i BoardGetByMemberYearRow
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.YearID,
		&i.Role,
		&i.ID_2,
		&i.Name,
		&i.Username,
		&i.ZauthID,
		&i.ID_3,
		&i.YearStart,
		&i.YearEnd,
	)
	return i, err
}

const boardGetByYearPopulated = `-- name: BoardGetByYearPopulated :many
SELECT b.id, member_id, year_id, role, m.id, name, username, zauth_id, y.id, year_start, year_end 
FROM board b 
INNER JOIN member m ON b.member_id = m.id 
INNER JOIN year y ON b.year_id = y.id
WHERE b.year_id = $1
`

type BoardGetByYearPopulatedRow struct {
	ID        int32
	MemberID  int32
	YearID    int32
	Role      string
	ID_2      int32
	Name      string
	Username  pgtype.Text
	ZauthID   pgtype.Int4
	ID_3      int32
	YearStart int32
	YearEnd   int32
}

func (q *Queries) BoardGetByYearPopulated(ctx context.Context, yearID int32) ([]BoardGetByYearPopulatedRow, error) {
	rows, err := q.db.Query(ctx, boardGetByYearPopulated, yearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BoardGetByYearPopulatedRow
	for rows.Next() {
		var i BoardGetByYearPopulatedRow
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.YearID,
			&i.Role,
			&i.ID_2,
			&i.Name,
			&i.Username,
			&i.ZauthID,
			&i.ID_3,
			&i.YearStart,
			&i.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

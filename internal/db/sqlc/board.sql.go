// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: board.sql

package sqlc

import (
	"context"
)

const boardCreate = `-- name: BoardCreate :one
INSERT INTO board (role, member_id, year_id, is_organizer)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type BoardCreateParams struct {
	Role        string
	MemberID    int32
	YearID      int32
	IsOrganizer bool
}

func (q *Queries) BoardCreate(ctx context.Context, arg BoardCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, boardCreate,
		arg.Role,
		arg.MemberID,
		arg.YearID,
		arg.IsOrganizer,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const boardDelete = `-- name: BoardDelete :exec
DELETE FROM board
WHERE id = $1
`

func (q *Queries) BoardDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, boardDelete, id)
	return err
}

const boardGetAll = `-- name: BoardGetAll :many
SELECT b.id, b.member_id, b.year_id, b.role, b.is_organizer, m.id, m.name, m.username, m.zauth_id, m.mattermost, y.id, y.year_start, y.year_end
FROM board b
LEFT JOIN member m ON b.member_id = m.id 
LEFT JOIN year y ON b.year_id = y.id
`

type BoardGetAllRow struct {
	Board  Board
	Member Member
	Year   Year
}

func (q *Queries) BoardGetAll(ctx context.Context) ([]BoardGetAllRow, error) {
	rows, err := q.db.Query(ctx, boardGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BoardGetAllRow
	for rows.Next() {
		var i BoardGetAllRow
		if err := rows.Scan(
			&i.Board.ID,
			&i.Board.MemberID,
			&i.Board.YearID,
			&i.Board.Role,
			&i.Board.IsOrganizer,
			&i.Member.ID,
			&i.Member.Name,
			&i.Member.Username,
			&i.Member.ZauthID,
			&i.Member.Mattermost,
			&i.Year.ID,
			&i.Year.YearStart,
			&i.Year.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const boardGetByIds = `-- name: BoardGetByIds :many
SELECT b.id, b.member_id, b.year_id, b.role, b.is_organizer, m.id, m.name, m.username, m.zauth_id, m.mattermost, y.id, y.year_start, y.year_end
FROM board b
LEFT JOIN member m ON b.member_id = m.id 
LEFT JOIN year y ON b.year_id = y.id
WHERE b.id = ANY($1::INT[])
`

type BoardGetByIdsRow struct {
	Board  Board
	Member Member
	Year   Year
}

func (q *Queries) BoardGetByIds(ctx context.Context, dollar_1 []int32) ([]BoardGetByIdsRow, error) {
	rows, err := q.db.Query(ctx, boardGetByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BoardGetByIdsRow
	for rows.Next() {
		var i BoardGetByIdsRow
		if err := rows.Scan(
			&i.Board.ID,
			&i.Board.MemberID,
			&i.Board.YearID,
			&i.Board.Role,
			&i.Board.IsOrganizer,
			&i.Member.ID,
			&i.Member.Name,
			&i.Member.Username,
			&i.Member.ZauthID,
			&i.Member.Mattermost,
			&i.Year.ID,
			&i.Year.YearStart,
			&i.Year.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const boardGetByMember = `-- name: BoardGetByMember :many
SELECT b.id, b.member_id, b.year_id, b.role, b.is_organizer, m.id, m.name, m.username, m.zauth_id, m.mattermost, y.id, y.year_start, y.year_end
FROM board b
LEFT JOIN member m ON b.member_id = m.id
LEFT JOIN year y ON b.year_id = y.id
WHERE m.id = $1
`

type BoardGetByMemberRow struct {
	Board  Board
	Member Member
	Year   Year
}

func (q *Queries) BoardGetByMember(ctx context.Context, id int32) ([]BoardGetByMemberRow, error) {
	rows, err := q.db.Query(ctx, boardGetByMember, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BoardGetByMemberRow
	for rows.Next() {
		var i BoardGetByMemberRow
		if err := rows.Scan(
			&i.Board.ID,
			&i.Board.MemberID,
			&i.Board.YearID,
			&i.Board.Role,
			&i.Board.IsOrganizer,
			&i.Member.ID,
			&i.Member.Name,
			&i.Member.Username,
			&i.Member.ZauthID,
			&i.Member.Mattermost,
			&i.Year.ID,
			&i.Year.YearStart,
			&i.Year.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const boardGetByMemberYear = `-- name: BoardGetByMemberYear :one
SELECT b.id, b.member_id, b.year_id, b.role, b.is_organizer, m.id, m.name, m.username, m.zauth_id, m.mattermost, y.id, y.year_start, y.year_end
FROM board b
LEFT JOIN member m ON b.member_id = m.id
LEFT JOIN year y ON b.year_id = y.id
WHERE m.id = $1 AND y.id = $2
`

type BoardGetByMemberYearParams struct {
	ID   int32
	ID_2 int32
}

type BoardGetByMemberYearRow struct {
	Board  Board
	Member Member
	Year   Year
}

func (q *Queries) BoardGetByMemberYear(ctx context.Context, arg BoardGetByMemberYearParams) (BoardGetByMemberYearRow, error) {
	row := q.db.QueryRow(ctx, boardGetByMemberYear, arg.ID, arg.ID_2)
	var i BoardGetByMemberYearRow
	err := row.Scan(
		&i.Board.ID,
		&i.Board.MemberID,
		&i.Board.YearID,
		&i.Board.Role,
		&i.Board.IsOrganizer,
		&i.Member.ID,
		&i.Member.Name,
		&i.Member.Username,
		&i.Member.ZauthID,
		&i.Member.Mattermost,
		&i.Year.ID,
		&i.Year.YearStart,
		&i.Year.YearEnd,
	)
	return i, err
}

const boardGetByYear = `-- name: BoardGetByYear :many
SELECT b.id, b.member_id, b.year_id, b.role, b.is_organizer, m.id, m.name, m.username, m.zauth_id, m.mattermost, y.id, y.year_start, y.year_end
FROM board b
LEFT JOIN member m ON b.member_id = m.id
LEFT JOIN year y ON b.year_id = y.id
WHERE b.year_id = $1
`

type BoardGetByYearRow struct {
	Board  Board
	Member Member
	Year   Year
}

func (q *Queries) BoardGetByYear(ctx context.Context, yearID int32) ([]BoardGetByYearRow, error) {
	rows, err := q.db.Query(ctx, boardGetByYear, yearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BoardGetByYearRow
	for rows.Next() {
		var i BoardGetByYearRow
		if err := rows.Scan(
			&i.Board.ID,
			&i.Board.MemberID,
			&i.Board.YearID,
			&i.Board.Role,
			&i.Board.IsOrganizer,
			&i.Member.ID,
			&i.Member.Name,
			&i.Member.Username,
			&i.Member.ZauthID,
			&i.Member.Mattermost,
			&i.Year.ID,
			&i.Year.YearStart,
			&i.Year.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const boardUpdate = `-- name: BoardUpdate :exec
UPDATE board
SET role = $2, member_id = $3, year_id = $4, is_organizer = $5
WHERE id = $1
`

type BoardUpdateParams struct {
	ID          int32
	Role        string
	MemberID    int32
	YearID      int32
	IsOrganizer bool
}

func (q *Queries) BoardUpdate(ctx context.Context, arg BoardUpdateParams) error {
	_, err := q.db.Exec(ctx, boardUpdate,
		arg.ID,
		arg.Role,
		arg.MemberID,
		arg.YearID,
		arg.IsOrganizer,
	)
	return err
}

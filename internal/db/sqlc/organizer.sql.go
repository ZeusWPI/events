// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: organizer.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const organizerCreate = `-- name: OrganizerCreate :one
INSERT INTO organizer (event, board)
VALUES ($1, $2)
RETURNING id
`

type OrganizerCreateParams struct {
	Event int32
	Board int32
}

func (q *Queries) OrganizerCreate(ctx context.Context, arg OrganizerCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, organizerCreate, arg.Event, arg.Board)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const organizerDelete = `-- name: OrganizerDelete :exec
DELETE FROM organizer 
WHERE id = $1
`

func (q *Queries) OrganizerDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, organizerDelete, id)
	return err
}

const organizerGetAllByEvent = `-- name: OrganizerGetAllByEvent :many
SELECT organizer.id, event, board, event.id, url, name, description, start_time, end_time, location, event.created_at, event.updated_at, deleted_at, event.academic_year, board.id, member, board.academic_year, role, board.created_at, board.updated_at FROM organizer 
INNER JOIN event ON organizer.event = event.id
INNER JOIN board ON organizer.board = board.id
WHERE event = $1
`

type OrganizerGetAllByEventRow struct {
	ID             int32
	Event          int32
	Board          int32
	ID_2           int32
	Url            string
	Name           string
	Description    pgtype.Text
	StartTime      pgtype.Timestamptz
	EndTime        pgtype.Timestamptz
	Location       pgtype.Text
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
	DeletedAt      pgtype.Timestamptz
	AcademicYear   int32
	ID_3           int32
	Member         int32
	AcademicYear_2 int32
	Role           string
	CreatedAt_2    pgtype.Timestamptz
	UpdatedAt_2    pgtype.Timestamptz
}

func (q *Queries) OrganizerGetAllByEvent(ctx context.Context, event int32) ([]OrganizerGetAllByEventRow, error) {
	rows, err := q.db.Query(ctx, organizerGetAllByEvent, event)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizerGetAllByEventRow
	for rows.Next() {
		var i OrganizerGetAllByEventRow
		if err := rows.Scan(
			&i.ID,
			&i.Event,
			&i.Board,
			&i.ID_2,
			&i.Url,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.AcademicYear,
			&i.ID_3,
			&i.Member,
			&i.AcademicYear_2,
			&i.Role,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

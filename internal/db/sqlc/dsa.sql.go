// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dsa.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const dsaCreate = `-- name: DsaCreate :one
INSERT INTO dsa (event_id, dsa_id)
VALUES ($1, $2)
RETURNING id
`

type DsaCreateParams struct {
	EventID int32
	DsaID   pgtype.Int4
}

func (q *Queries) DsaCreate(ctx context.Context, arg DsaCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, dsaCreate, arg.EventID, arg.DsaID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const dsaDelete = `-- name: DsaDelete :exec
DELETE FROM dsa 
WHERE id = $1
`

func (q *Queries) DsaDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, dsaDelete, id)
	return err
}

const dsaGetByEvent = `-- name: DsaGetByEvent :one
SELECT id, event_id, dsa_id, deleted
FROM dsa 
WHERE event_id = $1
LIMIT 1
`

func (q *Queries) DsaGetByEvent(ctx context.Context, eventID int32) (Dsa, error) {
	row := q.db.QueryRow(ctx, dsaGetByEvent, eventID)
	var i Dsa
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.DsaID,
		&i.Deleted,
	)
	return i, err
}

const dsaGetByEvents = `-- name: DsaGetByEvents :many
SELECT id, event_id, dsa_id, deleted
FROM dsa 
WHERE event_id = ANY($1::int[])
`

func (q *Queries) DsaGetByEvents(ctx context.Context, dollar_1 []int32) ([]Dsa, error) {
	rows, err := q.db.Query(ctx, dsaGetByEvents, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dsa
	for rows.Next() {
		var i Dsa
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.DsaID,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dsaUpdate = `-- name: DsaUpdate :exec
UPDATE dsa
SET event_id = $1, dsa_id = $2, deleted = $4
WHERE id = $3
`

type DsaUpdateParams struct {
	EventID int32
	DsaID   pgtype.Int4
	ID      int32
	Deleted bool
}

func (q *Queries) DsaUpdate(ctx context.Context, arg DsaUpdateParams) error {
	_, err := q.db.Exec(ctx, dsaUpdate,
		arg.EventID,
		arg.DsaID,
		arg.ID,
		arg.Deleted,
	)
	return err
}

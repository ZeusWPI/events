// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dsa.sql

package sqlc

import (
	"context"
)

const dsaCreate = `-- name: DsaCreate :one
INSERT INTO dsa (event_id, entry)
VALUES ($1, $2)
RETURNING id
`

type DsaCreateParams struct {
	EventID int32
	Entry   bool
}

func (q *Queries) DsaCreate(ctx context.Context, arg DsaCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, dsaCreate, arg.EventID, arg.Entry)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const dsaDelete = `-- name: DsaDelete :exec
DELETE FROM dsa 
WHERE id = $1
`

func (q *Queries) DsaDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, dsaDelete, id)
	return err
}

const dsaGetByEvents = `-- name: DsaGetByEvents :many
SELECT id, event_id, entry
FROM dsa 
WHERE event_id = ANY($1::int[])
`

func (q *Queries) DsaGetByEvents(ctx context.Context, dollar_1 []int32) ([]Dsa, error) {
	rows, err := q.db.Query(ctx, dsaGetByEvents, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dsa
	for rows.Next() {
		var i Dsa
		if err := rows.Scan(&i.ID, &i.EventID, &i.Entry); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

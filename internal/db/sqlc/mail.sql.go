// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mail.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const mailCreate = `-- name: MailCreate :one
INSERT INTO mail (title, content, send_time, send, error)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type MailCreateParams struct {
	Title    string
	Content  string
	SendTime pgtype.Timestamptz
	Send     bool
	Error    pgtype.Text
}

func (q *Queries) MailCreate(ctx context.Context, arg MailCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, mailCreate,
		arg.Title,
		arg.Content,
		arg.SendTime,
		arg.Send,
		arg.Error,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const mailError = `-- name: MailError :exec
UPDATE mail
SET error = $1
WHERE id = $2
`

type MailErrorParams struct {
	Error pgtype.Text
	ID    int32
}

func (q *Queries) MailError(ctx context.Context, arg MailErrorParams) error {
	_, err := q.db.Exec(ctx, mailError, arg.Error, arg.ID)
	return err
}

const mailGetAllPopulated = `-- name: MailGetAllPopulated :many
SELECT m.id, content, send_time, send, error, title, m_e.id, mail_id, event_id
FROM mail m
LEFT JOIN mail_event m_e ON m_e.mail_id = m.id
ORDER BY m.send_time
`

type MailGetAllPopulatedRow struct {
	ID       int32
	Content  string
	SendTime pgtype.Timestamptz
	Send     bool
	Error    pgtype.Text
	Title    string
	ID_2     pgtype.Int4
	MailID   pgtype.Int4
	EventID  pgtype.Int4
}

func (q *Queries) MailGetAllPopulated(ctx context.Context) ([]MailGetAllPopulatedRow, error) {
	rows, err := q.db.Query(ctx, mailGetAllPopulated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailGetAllPopulatedRow
	for rows.Next() {
		var i MailGetAllPopulatedRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SendTime,
			&i.Send,
			&i.Error,
			&i.Title,
			&i.ID_2,
			&i.MailID,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mailGetUnsend = `-- name: MailGetUnsend :many
SELECT id, content, send_time, send, error, title
FROM mail
WHERE NOT send AND error IS NULL
`

func (q *Queries) MailGetUnsend(ctx context.Context) ([]Mail, error) {
	rows, err := q.db.Query(ctx, mailGetUnsend)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mail
	for rows.Next() {
		var i Mail
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SendTime,
			&i.Send,
			&i.Error,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mailSend = `-- name: MailSend :exec
UPDATE mail
SET send = true
WHERE id = $1
`

func (q *Queries) MailSend(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, mailSend, id)
	return err
}

const mailUpdate = `-- name: MailUpdate :exec
UPDATE mail
SET title = $1, content = $2, send_time = $3
WHERE id = $4 AND NOT send
`

type MailUpdateParams struct {
	Title    string
	Content  string
	SendTime pgtype.Timestamptz
	ID       int32
}

func (q *Queries) MailUpdate(ctx context.Context, arg MailUpdateParams) error {
	_, err := q.db.Exec(ctx, mailUpdate,
		arg.Title,
		arg.Content,
		arg.SendTime,
		arg.ID,
	)
	return err
}

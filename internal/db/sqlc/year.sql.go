// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: year.sql

package sqlc

import (
	"context"
)

const yearCreate = `-- name: YearCreate :one
INSERT INTO year (start_year, end_year)
VALUES ($1, $2)
RETURNING id
`

type YearCreateParams struct {
	StartYear int32
	EndYear   int32
}

func (q *Queries) YearCreate(ctx context.Context, arg YearCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, yearCreate, arg.StartYear, arg.EndYear)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const yearGetAll = `-- name: YearGetAll :many
SELECT id, start_year, end_year FROM year
ORDER BY start_year DESC
`

func (q *Queries) YearGetAll(ctx context.Context) ([]Year, error) {
	rows, err := q.db.Query(ctx, yearGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Year
	for rows.Next() {
		var i Year
		if err := rows.Scan(&i.ID, &i.StartYear, &i.EndYear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const yearGetLatest = `-- name: YearGetLatest :one
SELECT id, start_year, end_year FROM year 
ORDER BY start_year DESC
LIMIT 1
`

func (q *Queries) YearGetLatest(ctx context.Context) (Year, error) {
	row := q.db.QueryRow(ctx, yearGetLatest)
	var i Year
	err := row.Scan(&i.ID, &i.StartYear, &i.EndYear)
	return i, err
}

const yearUpdate = `-- name: YearUpdate :exec
UPDATE year
SET start_year = $1, end_year = $2 
WHERE id = $3
`

type YearUpdateParams struct {
	StartYear int32
	EndYear   int32
	ID        int32
}

func (q *Queries) YearUpdate(ctx context.Context, arg YearUpdateParams) error {
	_, err := q.db.Exec(ctx, yearUpdate, arg.StartYear, arg.EndYear, arg.ID)
	return err
}

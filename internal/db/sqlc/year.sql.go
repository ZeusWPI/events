// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: year.sql

package sqlc

import (
	"context"
)

const yearCreate = `-- name: YearCreate :one
INSERT INTO year (year_start, year_end)
VALUES ($1, $2)
RETURNING id
`

type YearCreateParams struct {
	YearStart int32
	YearEnd   int32
}

func (q *Queries) YearCreate(ctx context.Context, arg YearCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, yearCreate, arg.YearStart, arg.YearEnd)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const yearGetAll = `-- name: YearGetAll :many
SELECT id, year_start, year_end FROM year
ORDER BY year_start DESC
`

func (q *Queries) YearGetAll(ctx context.Context) ([]Year, error) {
	rows, err := q.db.Query(ctx, yearGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Year
	for rows.Next() {
		var i Year
		if err := rows.Scan(&i.ID, &i.YearStart, &i.YearEnd); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const yearGetLast = `-- name: YearGetLast :one
SELECT id, year_start, year_end FROM year 
ORDER BY year_start DESC
LIMIT 1
`

func (q *Queries) YearGetLast(ctx context.Context) (Year, error) {
	row := q.db.QueryRow(ctx, yearGetLast)
	var i Year
	err := row.Scan(&i.ID, &i.YearStart, &i.YearEnd)
	return i, err
}

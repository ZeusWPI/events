// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: poster.sql

package sqlc

import (
	"context"
)

const posterCreate = `-- name: PosterCreate :one
INSERT INTO poster (event_id, file_id, webp_id, scc)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type PosterCreateParams struct {
	EventID int32
	FileID  string
	WebpID  string
	Scc     bool
}

func (q *Queries) PosterCreate(ctx context.Context, arg PosterCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, posterCreate,
		arg.EventID,
		arg.FileID,
		arg.WebpID,
		arg.Scc,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const posterDelete = `-- name: PosterDelete :exec
DELETE FROM poster
WHERE id = $1
`

func (q *Queries) PosterDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, posterDelete, id)
	return err
}

const posterGet = `-- name: PosterGet :one
SELECT id, event_id, file_id, scc, webp_id
FROM poster
WHERE id = $1
`

func (q *Queries) PosterGet(ctx context.Context, id int32) (Poster, error) {
	row := q.db.QueryRow(ctx, posterGet, id)
	var i Poster
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.FileID,
		&i.Scc,
		&i.WebpID,
	)
	return i, err
}

const posterGetAll = `-- name: PosterGetAll :many
SELECT id, event_id, file_id, scc, webp_id
FROM poster
`

func (q *Queries) PosterGetAll(ctx context.Context) ([]Poster, error) {
	rows, err := q.db.Query(ctx, posterGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Poster
	for rows.Next() {
		var i Poster
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.FileID,
			&i.Scc,
			&i.WebpID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const posterGetByEvents = `-- name: PosterGetByEvents :many
SELECT id, event_id, file_id, scc, webp_id
FROM poster
WHERE event_id = ANY($1::int[])
`

func (q *Queries) PosterGetByEvents(ctx context.Context, dollar_1 []int32) ([]Poster, error) {
	rows, err := q.db.Query(ctx, posterGetByEvents, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Poster
	for rows.Next() {
		var i Poster
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.FileID,
			&i.Scc,
			&i.WebpID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const posterUpdate = `-- name: PosterUpdate :exec
UPDATE poster
SET event_id = $1, file_id = $2, webp_id = $3, scc = $4
WHERE id = $5
`

type PosterUpdateParams struct {
	EventID int32
	FileID  string
	WebpID  string
	Scc     bool
	ID      int32
}

func (q *Queries) PosterUpdate(ctx context.Context, arg PosterUpdateParams) error {
	_, err := q.db.Exec(ctx, posterUpdate,
		arg.EventID,
		arg.FileID,
		arg.WebpID,
		arg.Scc,
		arg.ID,
	)
	return err
}

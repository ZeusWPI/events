// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: check_event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEventCreate = `-- name: CheckEventCreate :one
INSERT INTO check_event (check_uid, event_id, status, message)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CheckEventCreateParams struct {
	CheckUid string
	EventID  int32
	Status   CheckStatus
	Message  pgtype.Text
}

func (q *Queries) CheckEventCreate(ctx context.Context, arg CheckEventCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, checkEventCreate,
		arg.CheckUid,
		arg.EventID,
		arg.Status,
		arg.Message,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const checkEventCreateBatch = `-- name: CheckEventCreateBatch :exec
INSERT INTO check_event (check_uid, event_id, status, message)
VALUES (
  UNNEST($1::varchar[]),
  UNNEST($2::int[]),
  UNNEST($3::text[])::check_status,
  UNNEST($4::varchar[])

)
`

type CheckEventCreateBatchParams struct {
	Column1 []string
	Column2 []int32
	Column3 []string
	Column4 []string
}

func (q *Queries) CheckEventCreateBatch(ctx context.Context, arg CheckEventCreateBatchParams) error {
	_, err := q.db.Exec(ctx, checkEventCreateBatch,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const checkEventMattermost = `-- name: CheckEventMattermost :exec
UPDATE check_event
SET mattermost = true
WHERE id = $1
`

func (q *Queries) CheckEventMattermost(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, checkEventMattermost, id)
	return err
}

const checkEventUpdate = `-- name: CheckEventUpdate :exec
UPDATE check_event
SET status = $2, message = $3, updated_at = NOW()
WHERE id = $1
`

type CheckEventUpdateParams struct {
	ID      int32
	Status  CheckStatus
	Message pgtype.Text
}

func (q *Queries) CheckEventUpdate(ctx context.Context, arg CheckEventUpdateParams) error {
	_, err := q.db.Exec(ctx, checkEventUpdate, arg.ID, arg.Status, arg.Message)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const eventCreate = `-- name: EventCreate :one
INSERT INTO event (file_name, name, description, start_time, end_time, year_id, location, deleted)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type EventCreateParams struct {
	FileName    string
	Name        string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
	YearID      int32
	Location    pgtype.Text
	Deleted     bool
}

func (q *Queries) EventCreate(ctx context.Context, arg EventCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, eventCreate,
		arg.FileName,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.YearID,
		arg.Location,
		arg.Deleted,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const eventDelete = `-- name: EventDelete :exec
UPDATE event
SET deleted = true
WHERE id = $1
`

func (q *Queries) EventDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, eventDelete, id)
	return err
}

const eventGet = `-- name: EventGet :one
SELECT e.id, e.file_name, e.name, e.description, e.start_time, e.end_time, e.location, e.year_id, e.deleted, y.id, y.year_start, y.year_end
FROM event e
LEFT JOIN year y ON y.id = e.year_id
WHERE e.id = $1
`

type EventGetRow struct {
	Event Event
	Year  Year
}

func (q *Queries) EventGet(ctx context.Context, id int32) (EventGetRow, error) {
	row := q.db.QueryRow(ctx, eventGet, id)
	var i EventGetRow
	err := row.Scan(
		&i.Event.ID,
		&i.Event.FileName,
		&i.Event.Name,
		&i.Event.Description,
		&i.Event.StartTime,
		&i.Event.EndTime,
		&i.Event.Location,
		&i.Event.YearID,
		&i.Event.Deleted,
		&i.Year.ID,
		&i.Year.YearStart,
		&i.Year.YearEnd,
	)
	return i, err
}

const eventGetAll = `-- name: EventGetAll :many
SELECT e.id, e.file_name, e.name, e.description, e.start_time, e.end_time, e.location, e.year_id, e.deleted, y.id, y.year_start, y.year_end
FROM event e
LEFT JOIN year y ON y.id = e.year_id
WHERE NOT deleted
ORDER BY e.start_time
`

type EventGetAllRow struct {
	Event Event
	Year  Year
}

func (q *Queries) EventGetAll(ctx context.Context) ([]EventGetAllRow, error) {
	rows, err := q.db.Query(ctx, eventGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventGetAllRow
	for rows.Next() {
		var i EventGetAllRow
		if err := rows.Scan(
			&i.Event.ID,
			&i.Event.FileName,
			&i.Event.Name,
			&i.Event.Description,
			&i.Event.StartTime,
			&i.Event.EndTime,
			&i.Event.Location,
			&i.Event.YearID,
			&i.Event.Deleted,
			&i.Year.ID,
			&i.Year.YearStart,
			&i.Year.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventGetByIds = `-- name: EventGetByIds :many
SELECT e.id, e.file_name, e.name, e.description, e.start_time, e.end_time, e.location, e.year_id, e.deleted, y.id, y.year_start, y.year_end
FROM event e
LEFT JOIN year y ON y.id = e.year_id
WHERE e.id = ANY($1::int[])
ORDER BY e.start_time
`

type EventGetByIdsRow struct {
	Event Event
	Year  Year
}

func (q *Queries) EventGetByIds(ctx context.Context, dollar_1 []int32) ([]EventGetByIdsRow, error) {
	rows, err := q.db.Query(ctx, eventGetByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventGetByIdsRow
	for rows.Next() {
		var i EventGetByIdsRow
		if err := rows.Scan(
			&i.Event.ID,
			&i.Event.FileName,
			&i.Event.Name,
			&i.Event.Description,
			&i.Event.StartTime,
			&i.Event.EndTime,
			&i.Event.Location,
			&i.Event.YearID,
			&i.Event.Deleted,
			&i.Year.ID,
			&i.Year.YearStart,
			&i.Year.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventGetByYear = `-- name: EventGetByYear :many
SELECT e.id, e.file_name, e.name, e.description, e.start_time, e.end_time, e.location, e.year_id, e.deleted, y.id, y.year_start, y.year_end
FROM event e
LEFT JOIN year y ON y.id = e.year_id
WHERE e.year_id = $1 AND NOT deleted
ORDER BY e.start_time
`

type EventGetByYearRow struct {
	Event Event
	Year  Year
}

func (q *Queries) EventGetByYear(ctx context.Context, yearID int32) ([]EventGetByYearRow, error) {
	rows, err := q.db.Query(ctx, eventGetByYear, yearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventGetByYearRow
	for rows.Next() {
		var i EventGetByYearRow
		if err := rows.Scan(
			&i.Event.ID,
			&i.Event.FileName,
			&i.Event.Name,
			&i.Event.Description,
			&i.Event.StartTime,
			&i.Event.EndTime,
			&i.Event.Location,
			&i.Event.YearID,
			&i.Event.Deleted,
			&i.Year.ID,
			&i.Year.YearStart,
			&i.Year.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventGetFuture = `-- name: EventGetFuture :many
SELECT e.id, e.file_name, e.name, e.description, e.start_time, e.end_time, e.location, e.year_id, e.deleted, y.id, y.year_start, y.year_end
FROM event e
LEFT JOIN year y ON e.year_id = y.id
WHERE e.start_time > NOW() AND NOT deleted
ORDER BY e.start_time
`

type EventGetFutureRow struct {
	Event Event
	Year  Year
}

func (q *Queries) EventGetFuture(ctx context.Context) ([]EventGetFutureRow, error) {
	rows, err := q.db.Query(ctx, eventGetFuture)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventGetFutureRow
	for rows.Next() {
		var i EventGetFutureRow
		if err := rows.Scan(
			&i.Event.ID,
			&i.Event.FileName,
			&i.Event.Name,
			&i.Event.Description,
			&i.Event.StartTime,
			&i.Event.EndTime,
			&i.Event.Location,
			&i.Event.YearID,
			&i.Event.Deleted,
			&i.Year.ID,
			&i.Year.YearStart,
			&i.Year.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventGetNext = `-- name: EventGetNext :one
SELECT e.id, e.file_name, e.name, e.description, e.start_time, e.end_time, e.location, e.year_id, e.deleted, y.id, y.year_start, y.year_end
FROM event e
INNER JOIN year y ON e.year_id = y.id
WHERE e.end_time > NOW() AND NOT deleted
ORDER BY e.start_time
LIMIT 1
`

type EventGetNextRow struct {
	Event Event
	Year  Year
}

func (q *Queries) EventGetNext(ctx context.Context) (EventGetNextRow, error) {
	row := q.db.QueryRow(ctx, eventGetNext)
	var i EventGetNextRow
	err := row.Scan(
		&i.Event.ID,
		&i.Event.FileName,
		&i.Event.Name,
		&i.Event.Description,
		&i.Event.StartTime,
		&i.Event.EndTime,
		&i.Event.Location,
		&i.Event.YearID,
		&i.Event.Deleted,
		&i.Year.ID,
		&i.Year.YearStart,
		&i.Year.YearEnd,
	)
	return i, err
}

const eventUpdate = `-- name: EventUpdate :exec
UPDATE event 
SET name = $2, description = $3, start_time = $4, end_time = $5, year_id = $6, location = $7, deleted = $8
WHERE id = $1
`

type EventUpdateParams struct {
	ID          int32
	Name        string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
	YearID      int32
	Location    pgtype.Text
	Deleted     bool
}

func (q *Queries) EventUpdate(ctx context.Context, arg EventUpdateParams) error {
	_, err := q.db.Exec(ctx, eventUpdate,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.YearID,
		arg.Location,
		arg.Deleted,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const eventCreate = `-- name: EventCreate :one
INSERT INTO event (file_name, name, description, start_time, end_time, year_id, location)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type EventCreateParams struct {
	FileName    string
	Name        string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
	YearID      int32
	Location    pgtype.Text
}

func (q *Queries) EventCreate(ctx context.Context, arg EventCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, eventCreate,
		arg.FileName,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.YearID,
		arg.Location,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const eventDelete = `-- name: EventDelete :exec
DELETE FROM event 
WHERE id = $1
`

func (q *Queries) EventDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, eventDelete, id)
	return err
}

const eventGetAllWithYear = `-- name: EventGetAllWithYear :many
SELECT event.id, file_name, name, description, start_time, end_time, location, year_id, year.id, year_start, year_end FROM event
INNER JOIN year ON event.year_id = year.id
`

type EventGetAllWithYearRow struct {
	ID          int32
	FileName    string
	Name        string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
	Location    pgtype.Text
	YearID      int32
	ID_2        int32
	YearStart   int32
	YearEnd     int32
}

func (q *Queries) EventGetAllWithYear(ctx context.Context) ([]EventGetAllWithYearRow, error) {
	rows, err := q.db.Query(ctx, eventGetAllWithYear)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventGetAllWithYearRow
	for rows.Next() {
		var i EventGetAllWithYearRow
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.YearID,
			&i.ID_2,
			&i.YearStart,
			&i.YearEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventGetById = `-- name: EventGetById :one
SELECT id, file_name, name, description, start_time, end_time, location, year_id 
FROM event 
WHERE id = $1
`

func (q *Queries) EventGetById(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRow(ctx, eventGetById, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.YearID,
	)
	return i, err
}

const eventGetByIdPopulated = `-- name: EventGetByIdPopulated :one
SELECT jsonb_build_object(
  'id', e.id,
  'file_name', e.file_name,
  'name', e.name,
  'description', e.description,
  'start_time', e.start_time,
  'end_time', e.end_time,
  'year_id', e.year_id,
  'location', e.location,
  'year', (
    SELECT jsonb_build_object(
      'id', y.id,
      'year_start', y.year_start,
      'year_end', y.year_end
    )
    FROM year y
    WHERE y.id = e.year_id
  ),
  'organizers', (
    SELECT coalesce(json_agg(jsonb_build_object(
      'id', b.id,
      'member_id', b.member_id,
      'year_id', b.year_id,
      'role', b.role,
      'member', (
        SELECT jsonb_build_object(
          'id', m.id,
          'name', m.name,
          'username', m.username,
          'zauth_id', m.zauth_id
        )
        FROM member m 
        WHERE m.id = b.member_id
      ),
      'year', (
        SELECT jsonb_build_object(
          'id', y.id,
          'year_start', y.year_start,
          'year_end', y.year_end
        )
        FROM year y
        WHERE y.id = b.year_id
      )
    )), '[]')
    FROM board b 
    INNER JOIN organizer o ON o.board_id = b.id
    WHERE o.event_id = e.id
  ),
  'posters', (
    SELECT coalesce(json_agg(jsonb_build_object(
      'id', p.id,
      'event_id', p.event_id,
      'file_id', p.file_id,
      'scc', p.scc
    )), '[]')
    FROM poster p 
    WHERE p.event_id = e.id
  )
)
FROM event e 
WHERE e.id = $1
`

func (q *Queries) EventGetByIdPopulated(ctx context.Context, id int32) ([]byte, error) {
	row := q.db.QueryRow(ctx, eventGetByIdPopulated, id)
	var jsonb_build_object []byte
	err := row.Scan(&jsonb_build_object)
	return jsonb_build_object, err
}

const eventGetByIds = `-- name: EventGetByIds :many
SELECT id, file_name, name, description, start_time, end_time, location, year_id
FROM event
WHERE id = ANY($1::int[])
`

func (q *Queries) EventGetByIds(ctx context.Context, dollar_1 []int32) ([]Event, error) {
	rows, err := q.db.Query(ctx, eventGetByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.YearID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventGetByYearPopulated = `-- name: EventGetByYearPopulated :many
SELECT jsonb_build_object(
  'id', e.id,
  'file_name', e.file_name,
  'name', e.name,
  'description', e.description,
  'start_time', e.start_time,
  'end_time', e.end_time,
  'year_id', e.year_id,
  'location', e.location,
  'year', (
    SELECT jsonb_build_object(
      'id', y.id,
      'year_start', y.year_start,
      'year_end', y.year_end
    )
    FROM year y
    WHERE y.id = e.year_id
  ),
  'organizers', (
    SELECT coalesce(json_agg(jsonb_build_object(
      'id', b.id,
      'member_id', b.member_id,
      'year_id', b.year_id,
      'role', b.role,
      'member', (
        SELECT jsonb_build_object(
          'id', m.id,
          'name', m.name,
          'username', m.username,
          'zauth_id', m.zauth_id
        )
        FROM member m 
        WHERE m.id = b.member_id
      ),
      'year', (
        SELECT jsonb_build_object(
          'id', y.id,
          'year_start', y.year_start,
          'year_end', y.year_end
        )
        FROM year y
        WHERE y.id = b.year_id
      )
    )), '[]')
    FROM board b 
    INNER JOIN organizer o ON o.board_id = b.id
    WHERE o.event_id = e.id
  ),
  'posters', (
    SELECT coalesce(json_agg(jsonb_build_object(
      'id', p.id,
      'event_id', p.event_id,
      'file_id', p.file_id,
      'scc', p.scc
    )), '[]')
    FROM poster p 
    WHERE p.event_id = e.id
  )
)
FROM event e 
WHERE e.year_id = $1
`

func (q *Queries) EventGetByYearPopulated(ctx context.Context, yearID int32) ([][]byte, error) {
	rows, err := q.db.Query(ctx, eventGetByYearPopulated, yearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var jsonb_build_object []byte
		if err := rows.Scan(&jsonb_build_object); err != nil {
			return nil, err
		}
		items = append(items, jsonb_build_object)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventUpdate = `-- name: EventUpdate :exec
UPDATE event 
SET name = $1, description = $2, start_time = $3, end_time = $4, year_id = $5, location = $6
WHERE id = $7
`

type EventUpdateParams struct {
	Name        string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
	YearID      int32
	Location    pgtype.Text
	ID          int32
}

func (q *Queries) EventUpdate(ctx context.Context, arg EventUpdateParams) error {
	_, err := q.db.Exec(ctx, eventUpdate,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.YearID,
		arg.Location,
		arg.ID,
	)
	return err
}

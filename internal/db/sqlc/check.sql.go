// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: check.sql

package sqlc

import (
	"context"
)

const checkCreate = `-- name: CheckCreate :one
INSERT INTO "check" (event_id, description, done)
VALUES ($1, $2, $3)
RETURNING Id
`

type CheckCreateParams struct {
	EventID     int32
	Description string
	Done        bool
}

func (q *Queries) CheckCreate(ctx context.Context, arg CheckCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, checkCreate, arg.EventID, arg.Description, arg.Done)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const checkGetByEvents = `-- name: CheckGetByEvents :many
SELECT id, event_id, description, done
FROM "check"
WHERE event_id = ANY($1::int[])
`

func (q *Queries) CheckGetByEvents(ctx context.Context, dollar_1 []int32) ([]Check, error) {
	rows, err := q.db.Query(ctx, checkGetByEvents, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Check
	for rows.Next() {
		var i Check
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Description,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkToggle = `-- name: CheckToggle :exec
UPDATE "check"
SET done = NOT done
WHERE id = $1
`

func (q *Queries) CheckToggle(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, checkToggle, id)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (url, name, description, start_time, end_time, academic_year, location)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, url, name, description, start_time, end_time, academic_year, location, created_at, updated_at
`

type CreateEventParams struct {
	Url          string
	Name         string
	Description  pgtype.Text
	StartTime    pgtype.Timestamptz
	EndTime      pgtype.Timestamptz
	AcademicYear string
	Location     pgtype.Text
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Url,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.AcademicYear,
		arg.Location,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.AcademicYear,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllEvents = `-- name: GetAllEvents :many

SELECT id, url, name, description, start_time, end_time, academic_year, location, created_at, updated_at FROM event
`

// CRUD
func (q *Queries) GetAllEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, getAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.AcademicYear,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE event 
SET url = $1, name = $2, description = $3, start_time = $4, end_time = $5, academic_year = $6, location = $7, updated_at = CURRENT_TIMESTAMP
WHERE id = $8
RETURNING id, url, name, description, start_time, end_time, academic_year, location, created_at, updated_at
`

type UpdateEventParams struct {
	Url          string
	Name         string
	Description  pgtype.Text
	StartTime    pgtype.Timestamptz
	EndTime      pgtype.Timestamptz
	AcademicYear string
	Location     pgtype.Text
	ID           int32
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.Url,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.AcademicYear,
		arg.Location,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.AcademicYear,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: organizer.sql

package sqlc

import (
	"context"
)

const organizerCreate = `-- name: OrganizerCreate :one
INSERT INTO organizer (event, board)
VALUES ($1, $2)
RETURNING id
`

type OrganizerCreateParams struct {
	Event int32
	Board int32
}

func (q *Queries) OrganizerCreate(ctx context.Context, arg OrganizerCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, organizerCreate, arg.Event, arg.Board)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const organizerDelete = `-- name: OrganizerDelete :exec
DELETE FROM organizer 
WHERE id = $1
`

func (q *Queries) OrganizerDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, organizerDelete, id)
	return err
}

const organizerGetAllByEvent = `-- name: OrganizerGetAllByEvent :many
SELECT id, event, board FROM organizer 
WHERE event = $1
`

func (q *Queries) OrganizerGetAllByEvent(ctx context.Context, event int32) ([]Organizer, error) {
	rows, err := q.db.Query(ctx, organizerGetAllByEvent, event)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organizer
	for rows.Next() {
		var i Organizer
		if err := rows.Scan(&i.ID, &i.Event, &i.Board); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: academic_year.sql

package sqlc

import (
	"context"
)

const academicYearCreate = `-- name: AcademicYearCreate :one
INSERT INTO academic_year (start_year, end_year)
VALUES ($1, $2)
RETURNING id
`

type AcademicYearCreateParams struct {
	StartYear int32
	EndYear   int32
}

func (q *Queries) AcademicYearCreate(ctx context.Context, arg AcademicYearCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, academicYearCreate, arg.StartYear, arg.EndYear)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const academicYearGetAll = `-- name: AcademicYearGetAll :many
SELECT id, start_year, end_year FROM academic_year
ORDER BY start_year DESC
`

func (q *Queries) AcademicYearGetAll(ctx context.Context) ([]AcademicYear, error) {
	rows, err := q.db.Query(ctx, academicYearGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AcademicYear
	for rows.Next() {
		var i AcademicYear
		if err := rows.Scan(&i.ID, &i.StartYear, &i.EndYear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const academicYearUpdate = `-- name: AcademicYearUpdate :exec
UPDATE academic_year
SET start_year = $1, end_year = $2 
WHERE id = $3
`

type AcademicYearUpdateParams struct {
	StartYear int32
	EndYear   int32
	ID        int32
}

func (q *Queries) AcademicYearUpdate(ctx context.Context, arg AcademicYearUpdateParams) error {
	_, err := q.db.Exec(ctx, academicYearUpdate, arg.StartYear, arg.EndYear, arg.ID)
	return err
}

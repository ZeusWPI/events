// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: board.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const boardCreate = `-- name: BoardCreate :one
INSERT INTO board (member, academic_year, role)
VALUES ($1, $2, $3)
RETURNING id
`

type BoardCreateParams struct {
	Member       int32
	AcademicYear int32
	Role         string
}

func (q *Queries) BoardCreate(ctx context.Context, arg BoardCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, boardCreate, arg.Member, arg.AcademicYear, arg.Role)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const boardGetAll = `-- name: BoardGetAll :many
SELECT b.id, member, academic_year, role, created_at, updated_at, m.id, name, username, a_y.id, start_year, end_year FROM board b 
INNER JOIN member m ON b.member = m.id 
INNER JOIN academic_year a_y ON b.academic_year = a_y.id
`

type BoardGetAllRow struct {
	ID           int32
	Member       int32
	AcademicYear int32
	Role         string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	ID_2         int32
	Name         string
	Username     pgtype.Text
	ID_3         int32
	StartYear    int32
	EndYear      int32
}

func (q *Queries) BoardGetAll(ctx context.Context) ([]BoardGetAllRow, error) {
	rows, err := q.db.Query(ctx, boardGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BoardGetAllRow
	for rows.Next() {
		var i BoardGetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Member,
			&i.AcademicYear,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Username,
			&i.ID_3,
			&i.StartYear,
			&i.EndYear,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

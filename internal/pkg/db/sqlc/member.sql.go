// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: member.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const memberCreate = `-- name: MemberCreate :one
INSERT INTO member (name, username)
VALUES ($1, $2)
RETURNING id
`

type MemberCreateParams struct {
	Name     string
	Username pgtype.Text
}

func (q *Queries) MemberCreate(ctx context.Context, arg MemberCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, memberCreate, arg.Name, arg.Username)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const memberGetAll = `-- name: MemberGetAll :many
SELECT id, name, username FROM member
`

func (q *Queries) MemberGetAll(ctx context.Context) ([]Member, error) {
	rows, err := q.db.Query(ctx, memberGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(&i.ID, &i.Name, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const memberUpdate = `-- name: MemberUpdate :exec
UPDATE member 
SET name = $1, username = $2
WHERE id = $3
`

type MemberUpdateParams struct {
	Name     string
	Username pgtype.Text
	ID       int32
}

func (q *Queries) MemberUpdate(ctx context.Context, arg MemberUpdateParams) error {
	_, err := q.db.Exec(ctx, memberUpdate, arg.Name, arg.Username, arg.ID)
	return err
}
